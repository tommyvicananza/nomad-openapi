/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.4
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JobSubmission struct for JobSubmission
type JobSubmission struct {
	Format *string `json:"Format,omitempty"`
	Source *string `json:"Source,omitempty"`
	VariableFlags *map[string]string `json:"VariableFlags,omitempty"`
	Variables *string `json:"Variables,omitempty"`
}

// NewJobSubmission instantiates a new JobSubmission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobSubmission() *JobSubmission {
	this := JobSubmission{}
	return &this
}

// NewJobSubmissionWithDefaults instantiates a new JobSubmission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobSubmissionWithDefaults() *JobSubmission {
	this := JobSubmission{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *JobSubmission) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobSubmission) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *JobSubmission) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *JobSubmission) SetFormat(v string) {
	o.Format = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *JobSubmission) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobSubmission) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *JobSubmission) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *JobSubmission) SetSource(v string) {
	o.Source = &v
}

// GetVariableFlags returns the VariableFlags field value if set, zero value otherwise.
func (o *JobSubmission) GetVariableFlags() map[string]string {
	if o == nil || o.VariableFlags == nil {
		var ret map[string]string
		return ret
	}
	return *o.VariableFlags
}

// GetVariableFlagsOk returns a tuple with the VariableFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobSubmission) GetVariableFlagsOk() (*map[string]string, bool) {
	if o == nil || o.VariableFlags == nil {
		return nil, false
	}
	return o.VariableFlags, true
}

// HasVariableFlags returns a boolean if a field has been set.
func (o *JobSubmission) HasVariableFlags() bool {
	if o != nil && o.VariableFlags != nil {
		return true
	}

	return false
}

// SetVariableFlags gets a reference to the given map[string]string and assigns it to the VariableFlags field.
func (o *JobSubmission) SetVariableFlags(v map[string]string) {
	o.VariableFlags = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *JobSubmission) GetVariables() string {
	if o == nil || o.Variables == nil {
		var ret string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobSubmission) GetVariablesOk() (*string, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *JobSubmission) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given string and assigns it to the Variables field.
func (o *JobSubmission) SetVariables(v string) {
	o.Variables = &v
}

func (o JobSubmission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Format != nil {
		toSerialize["Format"] = o.Format
	}
	if o.Source != nil {
		toSerialize["Source"] = o.Source
	}
	if o.VariableFlags != nil {
		toSerialize["VariableFlags"] = o.VariableFlags
	}
	if o.Variables != nil {
		toSerialize["Variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableJobSubmission struct {
	value *JobSubmission
	isSet bool
}

func (v NullableJobSubmission) Get() *JobSubmission {
	return v.value
}

func (v *NullableJobSubmission) Set(val *JobSubmission) {
	v.value = val
	v.isSet = true
}

func (v NullableJobSubmission) IsSet() bool {
	return v.isSet
}

func (v *NullableJobSubmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobSubmission(val *JobSubmission) *NullableJobSubmission {
	return &NullableJobSubmission{value: val, isSet: true}
}

func (v NullableJobSubmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobSubmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


